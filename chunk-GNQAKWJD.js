import{v as p}from"./chunk-WKDYGGS7.js";import{M as n,R as u,h as a,j as t,n as o,v as s}from"./chunk-D2JNWC2G.js";var d=class c{constructor(e){this.supabase=e}getHospitales(){return a(this.supabase.client.from("hospitales").select("*").eq("es_activo",!0).order("nombre",{ascending:!0})).pipe(o(e=>{if(e.error)throw console.error("Error fetching hospitales:",e.error),new Error(e.error.message||"Error al cargar hospitales");return e.data||[]}),s(e=>(console.error("Service error loading hospitales:",e),t(()=>e))))}getHospitalById(e){return a(this.supabase.client.from("hospitales").select("*").eq("id",e).single()).pipe(o(r=>{if(r.error)throw new Error(r.error.message||"Error al cargar hospital");return r.data}),s(r=>(console.error("Service error loading hospital:",r),t(()=>r))))}createHospital(e){return a(this.supabase.client.from("hospitales").insert([e]).select().single()).pipe(o(r=>{if(r.error)throw console.error("Error creating hospital:",r.error),new Error(r.error.message||"Error al crear hospital");return r.data}),s(r=>(console.error("Service error creating hospital:",r),t(()=>r))))}updateHospital(e,r){return a(this.supabase.client.from("hospitales").update(r).eq("id",e).select().single()).pipe(o(i=>{if(i.error)throw console.error("Error updating hospital:",i.error),new Error(i.error.message||"Error al actualizar hospital");return i.data}),s(i=>(console.error("Service error updating hospital:",i),t(()=>i))))}deleteHospital(e){return a(this.supabase.client.from("hospitales").update({es_activo:!1}).eq("id",e)).pipe(o(r=>{if(r.error)throw console.error("Error deleting hospital:",r.error),new Error(r.error.message||"Error al eliminar hospital")}),s(r=>(console.error("Service error deleting hospital:",r),t(()=>r))))}getHospitalesByCiudad(e){return a(this.supabase.client.from("hospitales").select("*").eq("ciudad",e).eq("es_activo",!0).order("nombre",{ascending:!0})).pipe(o(r=>{if(r.error)throw console.error("Error fetching hospitales by ciudad:",r.error),new Error(r.error.message||"Error al cargar hospitales por ciudad");return r.data||[]}),s(r=>(console.error("Service error loading hospitales by ciudad:",r),t(()=>r))))}getCiudades(){return a(this.supabase.client.from("hospitales").select("ciudad").eq("es_activo",!0)).pipe(o(e=>{if(e.error)throw console.error("Error fetching ciudades:",e.error),new Error(e.error.message||"Error al cargar ciudades");return[...new Set(e.data?.map(i=>i.ciudad).filter(i=>i)||[])].sort()}),s(e=>(console.error("Service error loading ciudades:",e),t(()=>e))))}searchHospitales(e){return a(this.supabase.client.from("hospitales").select("*").eq("es_activo",!0).or(`nombre.ilike.%${e}%,ciudad.ilike.%${e}%,direccion.ilike.%${e}%`).order("nombre",{ascending:!0})).pipe(o(r=>{if(r.error)throw console.error("Error searching hospitales:",r.error),new Error(r.error.message||"Error al buscar hospitales");return r.data||[]}),s(r=>(console.error("Service error searching hospitales:",r),t(()=>r))))}getHospitalStats(){return a(this.supabase.client.from("hospitales").select("ciudad, es_activo")).pipe(o(e=>{if(e.error)throw new Error(e.error.message||"Error al cargar estad\xEDsticas");let r=e.data||[],i=r.filter(l=>l.es_activo);return{total:r.length,activos:i.length,inactivos:r.length-i.length,ciudades:[...new Set(i.map(l=>l.ciudad).filter(l=>l))].length}}),s(e=>(console.error("Service error loading hospital stats:",e),t(()=>e))))}static \u0275fac=function(r){return new(r||c)(u(p))};static \u0275prov=n({token:c,factory:c.\u0275fac,providedIn:"root"})};var g=class c{constructor(e){this.supabase=e}getTiposCirugia(){return a(this.supabase.client.from("tipos_cirugia").select("*").eq("es_activo",!0).order("nombre",{ascending:!0})).pipe(o(e=>{if(e.error)throw console.error("Error fetching tipos cirugia:",e.error),new Error(e.error.message||"Error al cargar tipos de cirug\xEDa");return e.data||[]}),s(e=>(console.error("Service error loading tipos cirugia:",e),t(()=>e))))}getTipoCirugiaById(e){return a(this.supabase.client.from("tipos_cirugia").select("*").eq("id",e).single()).pipe(o(r=>{if(r.error)throw new Error(r.error.message||"Error al cargar tipo de cirug\xEDa");return r.data}),s(r=>(console.error("Service error loading tipo cirugia:",r),t(()=>r))))}createTipoCirugia(e){return a(this.supabase.client.from("tipos_cirugia").insert([e]).select().single()).pipe(o(r=>{if(r.error)throw console.error("Error creating tipo cirugia:",r.error),new Error(r.error.message||"Error al crear tipo de cirug\xEDa");return r.data}),s(r=>(console.error("Service error creating tipo cirugia:",r),t(()=>r))))}updateTipoCirugia(e,r){return a(this.supabase.client.from("tipos_cirugia").update(r).eq("id",e).select().single()).pipe(o(i=>{if(i.error)throw console.error("Error updating tipo cirugia:",i.error),new Error(i.error.message||"Error al actualizar tipo de cirug\xEDa");return i.data}),s(i=>(console.error("Service error updating tipo cirugia:",i),t(()=>i))))}deleteTipoCirugia(e){return a(this.supabase.client.from("tipos_cirugia").update({es_activo:!1}).eq("id",e)).pipe(o(r=>{if(r.error)throw console.error("Error deleting tipo cirugia:",r.error),new Error(r.error.message||"Error al eliminar tipo de cirug\xEDa")}),s(r=>(console.error("Service error deleting tipo cirugia:",r),t(()=>r))))}getTiposByEspecialidad(e){return a(this.supabase.client.from("tipos_cirugia").select("*").eq("especialidad",e).eq("es_activo",!0).order("nombre",{ascending:!0})).pipe(o(r=>{if(r.error)throw console.error("Error fetching tipos by especialidad:",r.error),new Error(r.error.message||"Error al cargar tipos por especialidad");return r.data||[]}),s(r=>(console.error("Service error loading tipos by especialidad:",r),t(()=>r))))}getEspecialidades(){return a(this.supabase.client.from("tipos_cirugia").select("especialidad").eq("es_activo",!0)).pipe(o(e=>{if(e.error)throw console.error("Error fetching especialidades:",e.error),new Error(e.error.message||"Error al cargar especialidades");return[...new Set(e.data?.map(i=>i.especialidad).filter(i=>i)||[])].sort()}),s(e=>(console.error("Service error loading especialidades:",e),t(()=>e))))}static \u0275fac=function(r){return new(r||c)(u(p))};static \u0275prov=n({token:c,factory:c.\u0275fac,providedIn:"root"})};export{d as a,g as b};
