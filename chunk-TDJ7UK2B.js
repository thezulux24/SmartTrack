import{p as v,v as m}from"./chunk-SVQ7HZAZ.js";import{M as p,S as y,Vb as l,la as u}from"./chunk-YIZ2QXS6.js";import{a as g,b as N,i as a}from"./chunk-ODN5LVDJ.js";var S=class h{supabase=y(m);router=y(v);notifications=u([]);toasts=u([]);channel=null;userId=null;config=u({showToast:!0,playSound:!0,vibrate:!0,duration:5e3});unreadCount=l(()=>this.notifications().filter(i=>!i.read).length);allNotifications=l(()=>this.notifications().sort((i,t)=>new Date(t.created_at).getTime()-new Date(i.created_at).getTime()));unreadNotifications=l(()=>this.allNotifications().filter(i=>!i.read));activeToasts=l(()=>this.toasts());stats=l(()=>{let i=this.notifications(),t={total:i.length,unread:i.filter(o=>!o.read).length,by_type:{nuevo_mensaje:0,cambio_estado_cirugia:0,cambio_estado_kit:0,alerta_stock:0,alerta_vencimiento:0,asignacion_cirugia:0,sistema:0}};return i.forEach(o=>{t.by_type[o.type]!==void 0&&t.by_type[o.type]++}),t});constructor(){this.initializeService()}initializeService(){return a(this,null,function*(){try{let i=yield this.supabase.getSession();i?.user&&(this.userId=i.user.id,console.log("\u{1F514} Notification Service: Initializing for user",this.userId),yield this.loadNotifications(),this.subscribeToNotifications())}catch(i){console.error("\u274C Error initializing notification service:",i)}})}initialize(i){return a(this,null,function*(){this.userId=i,console.log("\u{1F514} Notification Service: Manual initialization for user",i),yield this.loadNotifications(),this.subscribeToNotifications()})}loadNotifications(){return a(this,null,function*(){if(!this.userId){console.warn("\u26A0\uFE0F NotificationService: No userId set, skipping load");return}try{console.log("\u{1F4E5} NotificationService: Loading notifications for",this.userId);let{data:i,error:t}=yield this.supabase.client.from("notificaciones").select("*").eq("user_id",this.userId).order("created_at",{ascending:!1}).limit(50);if(t)throw console.error("\u274C NotificationService: Error loading notifications:",t),t;i?(console.log("\u2705 NotificationService: Loaded",i.length,"notifications"),this.notifications.set(i)):console.log("\u{1F4ED} NotificationService: No notifications found")}catch(i){console.error("\u274C NotificationService: Exception loading notifications:",i)}})}subscribeToNotifications(){if(!this.userId){console.warn("\u26A0\uFE0F NotificationService: No userId, skipping realtime subscription");return}this.channel&&(console.log("\u{1F50C} NotificationService: Removing previous channel"),this.supabase.client.removeChannel(this.channel)),console.log("\u{1F50C} NotificationService: Creating realtime subscription for user:",this.userId),console.log("\u{1F4E1} Channel name:",`notifications:${this.userId}`),this.channel=this.supabase.client.channel(`notifications:${this.userId}`).on("postgres_changes",{event:"INSERT",schema:"public",table:"notificaciones",filter:`user_id=eq.${this.userId}`},i=>{console.log("\u{1F4EC} NotificationService: \u2728 REALTIME EVENT RECEIVED! \u2728"),console.log("\u{1F4EC} Payload:",i);let t=i.new;this.handleNewNotification(t)}).subscribe((i,t)=>{console.log("\u{1F50C} NotificationService: Subscription status:",i),t&&console.error("\u274C NotificationService: Subscription error:",t),i==="SUBSCRIBED"&&(console.log("\u2705 NotificationService: Successfully subscribed to realtime!"),console.log("\u23F3 Waiting for new notifications...")),i==="CHANNEL_ERROR"&&console.error("\u274C NotificationService: Channel error - Realtime may not be enabled"),i==="TIMED_OUT"&&console.error("\u274C NotificationService: Subscription timed out")})}handleNewNotification(i){console.log("\u{1F389} NotificationService: Handling new notification",i),this.notifications.update(t=>[i,...t]),console.log("\u2705 NotificationService: Added to notifications list. Total:",this.notifications().length),this.config().showToast&&(console.log("\u{1F35E} NotificationService: Showing toast"),this.showToast(i)),this.config().playSound&&(console.log("\u{1F50A} NotificationService: Playing sound"),this.playNotificationSound()),this.config().vibrate&&"vibrate"in navigator&&navigator.vibrate(200)}createNotification(i,t,o,e,n="medium",s,f){return a(this,null,function*(){console.log("\u{1F528} NotificationService.createNotification called:",{userId:i,type:t,title:o,message:e,priority:n});try{let r={user_id:i,type:t,priority:n,title:o,message:e,icon:this.getIconForType(t),icon_color:this.getColorForPriority(n),link:f,data:s||{},read:!1};console.log("\u{1F4DD} NotificationService: Inserting notification:",r);let{data:c,error:d}=yield this.supabase.client.from("notificaciones").insert(r).select().single();if(d)throw console.error("\u274C NotificationService.createNotification: Supabase error:",d),d;return console.log("\u2705 NotificationService.createNotification: Success!",c),c}catch(r){return console.error("\u274C NotificationService.createNotification: Exception:",r),null}})}notifyUsers(i,t,o,e,n="medium",s,f){return a(this,null,function*(){let r=i.map(c=>this.createNotification(c,t,o,e,n,s,f));yield Promise.allSettled(r)})}notifyNewMessage(i,t,o,e,n){return a(this,null,function*(){console.log("\u{1F4E8} NotificationService.notifyNewMessage called with:",{recipientIds:i,cirugia_id:t,numero_cirugia:o,remitente_nombre:e,mensaje_preview:n});try{yield this.notifyUsers(i,"nuevo_mensaje",`Nuevo mensaje en ${o}`,`${e}: ${n.substring(0,50)}${n.length>50?"...":""}`,"medium",{cirugia_id:t,remitente_nombre:e},`/internal/chat/${t}`),console.log("\u2705 NotificationService.notifyNewMessage: Notifications sent successfully")}catch(s){console.error("\u274C NotificationService.notifyNewMessage: Error:",s)}})}notifyCirugiaStatusChange(i,t,o,e,n){return a(this,null,function*(){yield this.notifyUsers(i,"cambio_estado_cirugia",`${o} cambi\xF3 de estado`,`De "${e}" a "${n}"`,"high",{cirugia_id:t,numero_cirugia:o,estado_anterior:e,estado_nuevo:n},"/internal/agenda")})}notifyKitStatusChange(i,t,o,e,n){return a(this,null,function*(){yield this.notifyUsers(i,"cambio_estado_kit",`Kit de ${o} actualizado`,`Estado: ${n}`,"medium",{kit_id:t,numero_cirugia:o,estado_anterior:e,estado_nuevo:n},"/internal/logistica")})}notifyLowStock(i,t,o,e,n){return a(this,null,function*(){yield this.notifyUsers(i,"alerta_stock","\u26A0\uFE0F Stock bajo",`${o}: ${e} unidades (m\xEDnimo: ${n})`,"high",{producto_id:t,producto_nombre:o,cantidad_actual:e,cantidad_minima:n},"/internal/inventario")})}notifyExpiringProduct(i,t,o,e,n){return a(this,null,function*(){yield this.notifyUsers(i,"alerta_vencimiento","\u23F0 Producto pr\xF3ximo a vencer",`${o} vence en ${n} d\xEDas (${e})`,"urgent",{producto_id:t,producto_nombre:o,fecha_vencimiento:e},"/internal/inventario")})}notifyAssignedToSurgery(i,t,o,e,n){return a(this,null,function*(){yield this.createNotification(i,"asignacion_cirugia","\u{1F3E5} Nueva cirug\xEDa asignada",`${o} - ${n} el ${e}`,"high",{cirugia_id:t,numero_cirugia:o,fecha_programada:e},"/internal/agenda")})}notifyNewCirugia(i,t,o,e,n,s,f){return a(this,null,function*(){console.log("\u{1F3E5} NotificationService.notifyNewCirugia called:",{tecnico_asignado_id:i,cirugia_id:t,numero_cirugia:o});try{let r={cirugia_id:t,numero_cirugia:o,medico_cirujano:e,fecha_programada:n,hospital_nombre:s},c=yield this.getLogisticaUsers();i&&(console.log("\u{1F4E8} Notificando a t\xE9cnico asignado:",i),yield this.createNotification(i,"asignacion_cirugia","\u{1F3E5} Nueva cirug\xEDa asignada",`${o} - ${e} en ${s}`,"high",r,`/internal/agenda/${t}`)),c.length>0&&(console.log("\u{1F4E6} Notificando a log\xEDstica:",c),yield this.notifyUsers(c,"asignacion_cirugia","\u{1F4CB} Nueva cirug\xEDa programada",`${o} - ${e} (creada por ${f})`,"medium",r,`/internal/agenda/${t}`)),console.log("\u2705 NotificationService.notifyNewCirugia: Notifications sent successfully")}catch(r){console.error("\u274C NotificationService.notifyNewCirugia: Error:",r)}})}markAsRead(i){return a(this,null,function*(){try{let{error:t}=yield this.supabase.client.from("notificaciones").update({read:!0}).eq("id",i);if(t)throw t;this.notifications.update(o=>o.map(e=>e.id===i?N(g({},e),{read:!0}):e))}catch(t){console.error("Error marking notification as read:",t)}})}markAllAsRead(){return a(this,null,function*(){if(this.userId)try{let{error:i}=yield this.supabase.client.from("notificaciones").update({read:!0}).eq("user_id",this.userId).eq("read",!1);if(i)throw i;this.notifications.update(t=>t.map(o=>N(g({},o),{read:!0})))}catch(i){console.error("Error marking all as read:",i)}})}deleteNotification(i){return a(this,null,function*(){try{let{error:t}=yield this.supabase.client.from("notificaciones").delete().eq("id",i);if(t)throw t;this.notifications.update(o=>o.filter(e=>e.id!==i))}catch(t){console.error("Error deleting notification:",t)}})}clearAll(){return a(this,null,function*(){if(this.userId)try{let{error:i}=yield this.supabase.client.from("notificaciones").delete().eq("user_id",this.userId);if(i)throw i;this.notifications.set([])}catch(i){console.error("Error clearing notifications:",i)}})}showToast(i){this.toasts.update(t=>[...t,i]),setTimeout(()=>{this.removeToast(i.id)},this.config().duration)}removeToast(i){this.toasts.update(t=>t.filter(o=>o.id!==i))}navigateToNotification(i){return a(this,null,function*(){yield this.markAsRead(i.id),i.link&&this.router.navigate([i.link])})}getLogisticaUsers(){return a(this,null,function*(){try{let{data:i,error:t}=yield this.supabase.client.from("profiles").select("id").eq("role","logistica").eq("is_active",!0);if(t)return console.error("\u274C Error fetching logistica users:",t),[];let o=(i||[]).map(e=>e.id);return console.log("\u{1F4E6} Logistica users found:",o.length),o}catch(i){return console.error("\u274C Exception getting logistica users:",i),[]}})}getIconForType(i){return{nuevo_mensaje:"\u{1F4AC}",cambio_estado_cirugia:"\u{1F3E5}",cambio_estado_kit:"\u{1F4E6}",alerta_stock:"\u26A0\uFE0F",alerta_vencimiento:"\u23F0",asignacion_cirugia:"\u{1F4CB}",sistema:"\u2139\uFE0F"}[i]||"\u2139\uFE0F"}getColorForPriority(i){return{low:"text-gray-500",medium:"text-blue-500",high:"text-orange-500",urgent:"text-red-500"}[i]}playNotificationSound(){let i=new(window.AudioContext||window.webkitAudioContext),t=i.createOscillator(),o=i.createGain();t.connect(o),o.connect(i.destination),t.frequency.value=800,t.type="sine",o.gain.setValueAtTime(.3,i.currentTime),o.gain.exponentialRampToValueAtTime(.01,i.currentTime+.1),t.start(i.currentTime),t.stop(i.currentTime+.1)}updateConfig(i){this.config.update(t=>g(g({},t),i))}destroy(){this.channel&&(this.supabase.client.removeChannel(this.channel),this.channel=null)}static \u0275fac=function(t){return new(t||h)};static \u0275prov=p({token:h,factory:h.\u0275fac,providedIn:"root"})};export{S as a};
